{"version":3,"sources":["src/components/form.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;2BAAsB,gBAAgB;;;;8BACb,oBAAoB;;;;IAExB,IAAI;YAAJ,IAAI;;eAAJ,IAAI;;WACR,kBAAC,IAAI,EAAE;AACpB,WAAK,IAAI,KAAK,IAAI,IAAI,EAAE;AACtB,YAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AAC9B,cAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;AACtB,cAAI,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAChC,kBAAM,0CAA0C,CAAC;WAClD;AACD,cAAI,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAChC,kBAAM,wCAAwC,CAAC;WAChD;AACD,cAAI,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AAC/B,kBAAM,yCAAyC,CAAC;WACjD;SACF;OACF;;AAED,aAAO,IAAI,CAAC;KACb;;;AAEU,WApBQ,IAAI,CAoBX,IAAI,EAAe;QAAb,MAAM,yDAAG,EAAE;;0BApBV,IAAI;;AAqBrB,+BArBiB,IAAI,6CAqBf,IAAI,EAAE,MAAM,EAAE;;AAEpB,QAAI,MAAM,CAAC,IAAI,EAAE;AACf,UAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,UAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC7B,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;AACxB,UAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAClC,MAAM;AACL,YAAM,+FAA+F,CAAC;KACvG;GACF;;eA/BkB,IAAI;;WAiCd,mBAAC,IAAI,EAAE;;;AACd,UAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACxB,cAAM,+DAA+D,CAAC;OACvE;;AAED,UAAI,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACrB,YAAI,KAAK,GAAG,MAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpC,YAAI,KAAK,EAAE;AACT,eAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5B;OACF,CAAC,CAAC;;AAEH,aAAO,IAAI,CAAC;KACb;;;WAEQ,qBAAG;AACV,UAAI,MAAM,GAAG,EAAE,CAAC;AAChB,UAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAK;AAC7B,cAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;OACxC,CAAC,CAAC;AACH,aAAO,MAAM,CAAC;KACf;;;WAEW,sBAAC,IAAI,EAAE;;;AACjB,UAAI,CAAC,MAAM,GAAG,EAAE,CAAC;;AAEjB,UAAI,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACrB,YAAI,CAAC,4BAAa,IAAI,CAAC,IAAI,CAAC,EAAE;AAC5B,gCAAoB,IAAI,CAAC,IAAI,oBAAiB;SAC/C;;AAED,eAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,4BAAa,IAAI,CAAC,IAAI,CAAC,CAAC;AAChD,gBAAM,EAAE,OAAK,WAAW;AACxB,kBAAQ,mBAAgB,IAAI,CAAC,KAAK,QAAI;SACvC,CAAC,CAAC;OACJ,CAAC,CAAC;;AAEH,aAAO,IAAI,CAAC;KACb;;;SAvEkB,IAAI;;;qBAAJ,IAAI","file":"src/components/form.js","sourcesContent":["import Container from './container.js';\nimport Spectangular from '../spectangular.js';\n\nexport default class Form extends Container {\n  static validate(data) {\n    for (var index in data) {\n      if (data.hasOwnProperty(index)) {\n        var row = data[index];\n        if (!row.hasOwnProperty('model')) {\n          throw 'Test specification does not have a model';\n        }\n        if (!row.hasOwnProperty('value')) {\n          throw 'Test specification does not have value';\n        }\n        if (!row.hasOwnProperty('type')) {\n          throw 'Test specification does not have a type';\n        }\n      }\n    }\n\n    return true;\n  }\n\n  constructor(impl, config = {}) {\n    super(impl, config);\n\n    if (config.data) {\n      this.createFields(config.data);\n      this.setValues(config.data);\n    } else if (config.fields) {\n      this.createFields(config.fields);\n    } else {\n      throw 'A form needs to have either data (containing fields) or fields specified on the configuration';\n    }\n  }\n\n  setValues(data) {\n    if (!Form.validate(data)) {\n      throw 'The data that you are trying to set to this form is not valid';\n    }\n\n    data.forEach((item) => {\n      let field = this.fields[item.model];\n      if (field) {\n        field.setValue(item.value);\n      }\n    });\n\n    return this;\n  }\n\n  getValues() {\n    var values = {};\n    this.fields.forEach((field) => {\n      values[field.model] = field.getValue();\n    });\n    return values;\n  }\n\n  createFields(data) {\n    this.fields = {};\n\n    data.forEach((item) => {\n      if (!Spectangular[item.type]) {\n        throw `Field type ${item.type} is not valid.`;\n      }\n\n      this.fields[item.model] = Spectangular[item.type]({\n        rootEl: this.componentEl,\n        selector: `[ng-model='${item.model}']`\n      });\n    });\n\n    return this;\n  }\n}\n"]}